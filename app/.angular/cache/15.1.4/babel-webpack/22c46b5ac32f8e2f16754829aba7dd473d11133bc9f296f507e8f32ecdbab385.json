{"ast":null,"code":"import { of } from 'rxjs';\nimport { tap, map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./http.service\";\nimport * as i2 from \"./notification.service\";\nimport * as i3 from \"@angular/router\";\nexport class AuthService {\n  constructor(_http, _notify, _router) {\n    this._http = _http;\n    this._notify = _notify;\n    this._router = _router;\n    this.USER_INFOS = 'USER_INFOS';\n    this.url = 'auth';\n    this.login = data => {\n      return this._http.addData(`${this.url}/login`, data).pipe(tap(res => {\n        this.doLoginUser(res.data);\n        this._notify.success(`Bienvenue ${res.data.firstName} ${res.data.lastName} !`, \"Success : \");\n      }), map(() => true), catchError(error => {\n        let message = 'Email ou mot de passe incorrect !';\n        if (error.status === 0) {\n          message = \"Serveur indisponible, veillez contactez le support !\";\n        } else {\n          message = error?.error?.error ? error?.error?.error : \"Connexion échouée, u;ne erreur est survenue\";\n        }\n        console.log(error);\n        this._notify.error(message, \"Erreur : \");\n        return of(false);\n      }));\n    };\n    this.logout = () => {\n      return this._http.addData(`${this.url}/logout`, {}).pipe(tap(() => {\n        this.doLogoutUser();\n        this._router.navigateByUrl('/').then();\n      }), map(() => true), catchError(error => {\n        console.log(error);\n        return of(false);\n      }));\n    };\n    this.isLoggedIn = () => {\n      return !!this.getAccessToken();\n    };\n    this.refreshToken = () => {\n      return this._http.addData(`${this.url}/refresh`, {\n        token: this.getRefreshToken()\n      }).pipe(tap(res => {\n        this.storeAcessToken(res.accessToken);\n      }));\n    };\n    this.getAccessToken = () => {\n      return this.getUserLoggedIn()?.accessToken;\n    };\n    this.getRefreshToken = () => {\n      return this.getUserLoggedIn()?.refreshToken;\n    };\n    this.getUserLoggedIn = () => {\n      const userInfos = localStorage.getItem(this.USER_INFOS);\n      if (userInfos) {\n        const user = JSON.parse(userInfos);\n        return user;\n      }\n      return null;\n    };\n    this.storeAcessToken = accessToken => {\n      const userInfos = localStorage.getItem(this.USER_INFOS);\n      if (userInfos) {\n        let user = JSON.parse(userInfos);\n        user = {\n          ...user,\n          accessToken: accessToken\n        };\n        localStorage.setItem(this.USER_INFOS, JSON.stringify(user));\n      }\n    };\n    this.doLoginUser = user => {\n      localStorage.setItem(this.USER_INFOS, JSON.stringify(user));\n    };\n    this.doLogoutUser = () => {\n      localStorage.removeItem(this.USER_INFOS);\n    };\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpService), i0.ɵɵinject(i2.NotificationService), i0.ɵɵinject(i3.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["of","tap","map","catchError","AuthService","constructor","_http","_notify","_router","data","addData","url","pipe","res","doLoginUser","success","firstName","lastName","error","message","status","console","log","doLogoutUser","navigateByUrl","then","getAccessToken","token","getRefreshToken","storeAcessToken","accessToken","getUserLoggedIn","refreshToken","userInfos","localStorage","getItem","USER_INFOS","user","JSON","parse","setItem","stringify","removeItem","factory","providedIn"],"sourceRoot":"","sources":["/home/laye/dev/spring/atos-micro-angular/app/src/app/shared/services/auth.service.ts"],"sourcesContent":["import { User } from '../interfaces/user';\nimport { HttpService } from './http.service';\nimport { NotificationService } from './notification.service';\nimport { UserLoggedIn } from '../interfaces/user-logged-in';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { tap, map, catchError } from 'rxjs/operators';\n\ninterface IResponse {\n  status: number;\n  data: UserLoggedIn,\n  message: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private readonly USER_INFOS = 'USER_INFOS';\n  private readonly url = 'auth';\n\n  constructor(\n    private _http: HttpService,\n    private _notify: NotificationService,\n    private _router: Router\n  ) { }\n\n  login = (data: { login: string, password: string }): Observable<boolean> => {\n    return this._http.addData(`${this.url}/login`, data)\n      .pipe(\n        tap((res: IResponse) => {\n          this.doLoginUser(res.data);\n          this._notify.success(`Bienvenue ${res.data.firstName} ${res.data.lastName} !`, \"Success : \");\n        }),\n        map(()=>true),\n        catchError(error => {\n          let message = 'Email ou mot de passe incorrect !'\n          if(error.status === 0){ \n            message = \"Serveur indisponible, veillez contactez le support !\";\n          }\n          else{ \n            message = error?.error?.error ? error?.error?.error : \"Connexion échouée, u;ne erreur est survenue\"\n          }\n          console.log(error);\n          this._notify.error(message, \"Erreur : \");\n          return of(false);\n        }));\n  }\n\n  logout = (): Observable<boolean> => {\n    return this._http.addData(`${this.url}/logout`,{})\n      .pipe(\n        tap(() => {\n          this.doLogoutUser();\n          this._router.navigateByUrl('/').then()\n        }),\n        map(()=>true),\n        catchError(error => {\n          console.log(error)\n          return of(false);\n        }));\n  }\n\n  isLoggedIn = (): boolean => { return !!this.getAccessToken(); }\n\n  refreshToken = (): Observable<{userId: string, accessToken: string, refreshToken: string }> => {\n    return this._http.addData(`${this.url}/refresh`, { token: this.getRefreshToken() })\n      .pipe(\n        tap((res: {userId: string, accessToken: string, refreshToken: string }) => {\n        this.storeAcessToken(res.accessToken);\n      }));\n  }\n\n  getAccessToken = (): string|undefined => { \n    return this.getUserLoggedIn()?.accessToken; \n  }\n\n  getRefreshToken = (): string|undefined => { \n    return this.getUserLoggedIn()?.refreshToken; \n  }\n\n  getUserLoggedIn = (): UserLoggedIn|null => {\n    const userInfos = localStorage.getItem(this.USER_INFOS);\n\n    if (userInfos) {\n      const user: UserLoggedIn = JSON.parse(userInfos);\n      return user;\n    }\n     return null\n  }\n\n  private storeAcessToken = (accessToken: string): void => { \n    const userInfos = localStorage.getItem(this.USER_INFOS);\n    if (userInfos) {\n      let user: UserLoggedIn = JSON.parse(userInfos);\n      user = {...user, accessToken: accessToken}\n      localStorage.setItem(this.USER_INFOS, JSON.stringify(user)); \n    }\n  }\n\n  private doLoginUser = (user: UserLoggedIn): void => {\n    localStorage.setItem(this.USER_INFOS, JSON.stringify(user));\n  }\n\n  private doLogoutUser = (): void => {\n    localStorage.removeItem(this.USER_INFOS);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}