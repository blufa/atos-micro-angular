{"ast":null,"code":"import { FormArray, FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../../services/builder-form.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../candidate-form/candidate-form.component\";\nimport * as i6 from \"../education-form/education-form.component\";\nimport * as i7 from \"../leisures-form/leisures-form.component\";\nimport * as i8 from \"../certifications-form/certifications-form.component\";\nimport * as i9 from \"../skills-form/skills-form.component\";\nimport * as i10 from \"../references-form/references-form.component\";\nimport * as i11 from \"../languages-form/languages-form.component\";\nimport * as i12 from \"../awards-honors-form/awards-honors-form.component\";\nimport * as i13 from \"../work-experiences-form/work-experiences-form.component\";\nexport class BuilderFormComponent {\n  constructor(formBuilder, activatedRoute, builderService, router) {\n    this.formBuilder = formBuilder;\n    this.activatedRoute = activatedRoute;\n    this.builderService = builderService;\n    this.router = router;\n  }\n  ngOnInit() {\n    // get resume id if we're updating\n    const paramMap = this.activatedRoute.snapshot.paramMap;\n    if (paramMap.has('resumeId')) {\n      const id = paramMap.get('resumeId');\n      this.builderService.getResume(id).subscribe(resume => {\n        this.createForm(resume);\n      });\n    } else {\n      this.createForm();\n    }\n  }\n  createForm(resume) {\n    if (resume != undefined) {\n      this.form = this.formBuilder.group({\n        candidate: this.formBuilder.group({\n          firstName: ['', [Validators.required, Validators.min(2)]],\n          lastName: ['', [Validators.required, Validators.min(2)]],\n          email: ['', [Validators.required, Validators.email]],\n          address: ['', [Validators.required, Validators.min(3)]],\n          phoneNumber: ['', [Validators.required, Validators.min(9), Validators.max(12)]],\n          dob: [''],\n          occupation: ['', [Validators.required, Validators.min(5)]],\n          photoUrl: [''],\n          externalLinks: this.formBuilder.array([])\n        }),\n        education: new FormArray(resume.education.map(edu => new FormGroup({\n          schoolName: new FormControl(edu.schoolName, [Validators.required, Validators.minLength(3)]),\n          diploma: new FormControl(edu.diploma, [Validators.required, Validators.minLength(3)]),\n          startDate: new FormControl(edu.startDate, [Validators.required]),\n          endDate: new FormControl(edu.endDate)\n        }))),\n        leisures: new FormArray(resume.leisures.map(leisure => new FormControl(leisure, [Validators.required, Validators.minLength(3)]))),\n        certifications: new FormArray(resume.certifications.map(certification => new FormGroup({\n          name: new FormControl(certification.name, [Validators.required, Validators.minLength(3)]),\n          year: new FormControl(certification.year, [Validators.required, Validators.minLength(4), Validators.maxLength(4), Validators.min(1900), Validators.max(new Date().getFullYear())])\n        }))),\n        skills: new FormArray(resume.skills.map(skill => new FormGroup({\n          name: new FormControl(skill.name, [Validators.required, Validators.minLength(2)]),\n          level: new FormControl(skill.level, [Validators.required])\n        }))),\n        references: new FormArray(resume.references.map(ref => new FormGroup({\n          fullName: new FormControl(ref.fullName, [Validators.required, Validators.minLength(5)]),\n          phoneNumber: new FormControl(ref.phoneNumber, [Validators.required, Validators.minLength(9), Validators.maxLength(12)]),\n          email: new FormControl(ref.email, [Validators.required, Validators.email]),\n          jobTitle: new FormControl(ref.jobTitle, [Validators.required, Validators.minLength(3)]),\n          company: new FormControl(ref.company, [Validators.required, Validators.minLength(2)])\n        }))),\n        languages: new FormArray(resume.languages.map(language => new FormGroup({\n          name: new FormControl(language.name, [Validators.required, Validators.minLength(2)]),\n          level: new FormControl(language.level, [Validators.required])\n        }))),\n        workExperiences: new FormArray(resume.workExperiences.map(work => new FormGroup({\n          company: new FormControl(work.company, [Validators.required, Validators.minLength(2)]),\n          jobTitle: new FormControl(work.jobTitle, [Validators.required, Validators.minLength(3)]),\n          jobDescription: new FormControl(work.jobDescription, [Validators.required, Validators.minLength(20)]),\n          startDate: new FormControl(work.startDate, [Validators.required]),\n          endDate: new FormControl(work.endDate)\n        }))),\n        awardsHonors: new FormArray(resume.awardsHonors.map(awardsHonors => new FormGroup({\n          name: new FormControl(awardsHonors.name, [Validators.required, Validators.minLength(3)]),\n          year: new FormControl(awardsHonors.year, [Validators.required, Validators.minLength(4), Validators.maxLength(4), Validators.min(1900), Validators.max(new Date().getFullYear())])\n        })))\n      });\n      return;\n    }\n    this.form = this.formBuilder.group({\n      candidate: this.formBuilder.group({\n        firstName: ['', [Validators.required, Validators.min(2)]],\n        lastName: ['', [Validators.required, Validators.min(2)]],\n        email: ['', [Validators.required, Validators.email]],\n        address: ['', [Validators.required, Validators.min(3)]],\n        phoneNumber: ['', [Validators.required, Validators.min(9), Validators.max(12)]],\n        dob: [''],\n        occupation: ['', [Validators.required, Validators.min(5)]],\n        photoUrl: [''],\n        externalLinks: this.formBuilder.array([])\n      }),\n      education: this.formBuilder.array([]),\n      leisures: this.formBuilder.array([]),\n      certifications: this.formBuilder.array([]),\n      skills: this.formBuilder.array([]),\n      references: this.formBuilder.array([]),\n      languages: this.formBuilder.array([]),\n      workExperiences: this.formBuilder.array([]),\n      awardsHonors: this.formBuilder.array([])\n    });\n  }\n  onSubmit() {\n    console.log(this.form.value);\n  }\n  getCandidateForm() {\n    return this.form.get(\"candidate\");\n  }\n  getEducationForm() {\n    return this.form.get(\"education\");\n  }\n  getLeisuresForm() {\n    return this.form.get(\"leisures\");\n  }\n  getCertificationsForm() {\n    return this.form.get(\"certifications\");\n  }\n  getSkillsForm() {\n    return this.form.get(\"skills\");\n  }\n  getReferencesForm() {\n    return this.form.get(\"references\");\n  }\n  getLanguagesForm() {\n    return this.form.get(\"languages\");\n  }\n  getWorkExperiencesForm() {\n    return this.form.get(\"workExperiences\");\n  }\n  getAwardsHonorsForm() {\n    return this.form.get(\"awardsHonors\");\n  }\n}\nBuilderFormComponent.ɵfac = function BuilderFormComponent_Factory(t) {\n  return new (t || BuilderFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.BuilderFormService), i0.ɵɵdirectiveInject(i2.Router));\n};\nBuilderFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: BuilderFormComponent,\n  selectors: [[\"app-builder-form\"]],\n  decls: 23,\n  vars: 11,\n  consts: [[1, \"w-full\", \"form-container\", \"bg-white\", \"py-5\", 3, \"ngSubmit\"], [3, \"form\"], [1, \"w-full\", \"flex\", \"justify-between\", \"px-4\"], [1, \"bg-red-400\", \"px-4\", \"py-2\", \"text-white\", \"rounded-[5px]\"], [1, \"bg-blue-500\", \"text-white\", \"px-8\", \"py-2\", \"rounded-[5px]\", 3, \"ngClass\", \"disabled\"]],\n  template: function BuilderFormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function BuilderFormComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelement(1, \"app-candidate-form\", 1)(2, \"hr\")(3, \"app-education-form\", 1)(4, \"hr\")(5, \"app-leisures-form\", 1)(6, \"hr\")(7, \"app-certifications-form\", 1)(8, \"hr\")(9, \"app-skills-form\", 1)(10, \"hr\")(11, \"app-references-form\", 1)(12, \"hr\")(13, \"app-languages-form\", 1)(14, \"hr\")(15, \"app-work-experiences-form\", 1)(16, \"hr\")(17, \"app-awards-honors-form\", 1);\n      i0.ɵɵelementStart(18, \"div\", 2)(19, \"button\", 3);\n      i0.ɵɵtext(20, \"Cancel\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(21, \"button\", 4);\n      i0.ɵɵtext(22, \"Save\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"form\", ctx.getCandidateForm());\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"form\", ctx.getEducationForm());\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"form\", ctx.getLeisuresForm());\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"form\", ctx.getCertificationsForm());\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"form\", ctx.getSkillsForm());\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"form\", ctx.getReferencesForm());\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"form\", ctx.getLanguagesForm());\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"form\", ctx.getWorkExperiencesForm());\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"form\", ctx.getAwardsHonorsForm());\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngClass\", ctx.form.invalid ? \"bg-opacity-30\" : \"\")(\"disabled\", ctx.form.invalid);\n    }\n  },\n  dependencies: [i4.NgClass, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.NgForm, i5.CandidateFormComponent, i6.EducationFormComponent, i7.LeisuresFormComponent, i8.CertificationsFormComponent, i9.SkillsFormComponent, i10.ReferencesFormComponent, i11.LanguagesFormComponent, i12.AwardsHonorsFormComponent, i13.WorkExperiencesFormComponent],\n  styles: [\".form-container[_ngcontent-%COMP%] {\\n  display: grid;\\n  row-gap: 3rem;\\n  padding: 2rem 0;\\n}\\n.form-container[_ngcontent-%COMP%]   .btnsContainer[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: space-between;\\n}\\n.form-container[_ngcontent-%COMP%]   .btnsContainer[_ngcontent-%COMP%]   button[_ngcontent-%COMP%] {\\n  padding: 0.5rem 2rem;\\n  border-radius: 8px;\\n  transition: 0.25s;\\n}\\n.form-container[_ngcontent-%COMP%]   .btnsContainer[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:last-child {\\n  color: white;\\n  background-color: black;\\n}\\n.form-container[_ngcontent-%COMP%]   .btnsContainer[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:last-child:hover {\\n  background-color: grey;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYnVpbGRlci9jb21wb25lbnRzL2J1aWxkZXItZm9ybS9idWlsZGVyLWZvcm0uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxhQUFBO0VBQ0EsYUFBQTtFQUNBLGVBQUE7QUFDSjtBQUNJO0VBQ0ksYUFBQTtFQUNBLDhCQUFBO0FBQ1I7QUFDUTtFQUNJLG9CQUFBO0VBQ0Esa0JBQUE7RUFDQSxpQkFBQTtBQUNaO0FBQ1k7RUFDSSxZQUFBO0VBQ0EsdUJBQUE7QUFDaEI7QUFDZ0I7RUFDSSxzQkFBQTtBQUNwQiIsInNvdXJjZXNDb250ZW50IjpbIi5mb3JtLWNvbnRhaW5lciB7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICByb3ctZ2FwOiAzcmVtO1xuICAgIHBhZGRpbmc6IDJyZW0gMDtcblxuICAgIC5idG5zQ29udGFpbmVyIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuXG4gICAgICAgIGJ1dHRvbiB7XG4gICAgICAgICAgICBwYWRkaW5nOiAuNXJlbSAycmVtO1xuICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICAgICAgICAgICAgdHJhbnNpdGlvbjogLjI1cztcblxuICAgICAgICAgICAgJjpsYXN0LWNoaWxkIHtcbiAgICAgICAgICAgICAgICBjb2xvcjogd2hpdGU7XG4gICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XG5cbiAgICAgICAgICAgICAgICAmOmhvdmVyIHtcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogZ3JleTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormArray","FormControl","FormGroup","Validators","BuilderFormComponent","constructor","formBuilder","activatedRoute","builderService","router","ngOnInit","paramMap","snapshot","has","id","get","getResume","subscribe","resume","createForm","undefined","form","group","candidate","firstName","required","min","lastName","email","address","phoneNumber","max","dob","occupation","photoUrl","externalLinks","array","education","map","edu","schoolName","minLength","diploma","startDate","endDate","leisures","leisure","certifications","certification","name","year","maxLength","Date","getFullYear","skills","skill","level","references","ref","fullName","jobTitle","company","languages","language","workExperiences","work","jobDescription","awardsHonors","onSubmit","console","log","value","getCandidateForm","getEducationForm","getLeisuresForm","getCertificationsForm","getSkillsForm","getReferencesForm","getLanguagesForm","getWorkExperiencesForm","getAwardsHonorsForm","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/home/laye/dev/spring/atos-micro-angular/app/src/app/builder/components/builder-form/builder-form.component.ts","/home/laye/dev/spring/atos-micro-angular/app/src/app/builder/components/builder-form/builder-form.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BuilderFormService } from '../../services/builder-form.service';\n\n@Component({\n  selector: 'app-builder-form',\n  templateUrl: './builder-form.component.html',\n  styleUrls: ['./builder-form.component.scss']\n})\nexport class BuilderFormComponent implements OnInit {\n  candidateForm: FormGroup;\n  educationForm: FormGroup;\n  leisuresForm: FormGroup;\n  certificationsForm: FormGroup;\n  skillsForm: FormGroup;\n  referencesForm: FormGroup;\n  languagesForm: FormGroup;\n  workExperiencesForm: FormGroup;\n  awardsHonorsForm: FormGroup;\n\n  form: FormGroup;\n\n  constructor(private formBuilder: FormBuilder, private activatedRoute: ActivatedRoute, private builderService: BuilderFormService, private router: Router) { }\n\n  ngOnInit(): void {\n    // get resume id if we're updating\n    const paramMap = this.activatedRoute.snapshot.paramMap;\n\n    if (paramMap.has('resumeId')) {\n      const id = paramMap.get('resumeId');\n\n      this.builderService.getResume(id!).subscribe((resume) => {\n        this.createForm(resume);\n      });\n    } else {\n      this.createForm();\n    }\n  }\n\n  createForm(resume?: any): void {\n    if (resume != undefined) {\n      this.form = this.formBuilder.group({\n        candidate: this.formBuilder.group({\n          firstName: ['', [Validators.required, Validators.min(2)]],\n          lastName: ['', [Validators.required, Validators.min(2)]],\n          email: ['', [Validators.required, Validators.email]],\n          address: ['', [Validators.required, Validators.min(3)]],\n          phoneNumber: ['', [Validators.required, Validators.min(9), Validators.max(12)]],\n          dob: [''],\n          occupation: ['', [Validators.required, Validators.min(5)]],\n          photoUrl: [''],\n          externalLinks: this.formBuilder.array([])\n        }),\n        education: new FormArray(resume.education.map((edu: any) => new FormGroup({\n          schoolName: new FormControl(edu.schoolName, [Validators.required, Validators.minLength(3)]),\n          diploma: new FormControl(edu.diploma, [Validators.required, Validators.minLength(3)]),\n          startDate: new FormControl(edu.startDate, [Validators.required]),\n          endDate: new FormControl(edu.endDate)\n        }))),\n        leisures: new FormArray(resume.leisures.map((leisure: any) => new FormControl(leisure, [Validators.required, Validators.minLength(3)]))),\n        certifications: new FormArray(resume.certifications.map((certification: any) => new FormGroup({\n          name: new FormControl(certification.name, [Validators.required, Validators.minLength(3)]),\n          year: new FormControl(certification.year, [Validators.required, Validators.minLength(4), Validators.maxLength(4), Validators.min(1900), Validators.max(new Date().getFullYear())])\n        }))),\n        skills: new FormArray(resume.skills.map((skill: any) => new FormGroup({\n          name: new FormControl(skill.name, [Validators.required, Validators.minLength(2)]),\n          level: new FormControl(skill.level, [Validators.required])\n        }))),\n        references: new FormArray(resume.references.map((ref: any) => new FormGroup({\n          fullName: new FormControl(ref.fullName, [Validators.required, Validators.minLength(5)]),\n          phoneNumber: new FormControl(ref.phoneNumber, [Validators.required, Validators.minLength(9), Validators.maxLength(12)]),\n          email: new FormControl(ref.email, [Validators.required, Validators.email]),\n          jobTitle: new FormControl(ref.jobTitle, [Validators.required, Validators.minLength(3)]),\n          company: new FormControl(ref.company, [Validators.required, Validators.minLength(2)])\n        }))),\n        languages: new FormArray(resume.languages.map((language: any) => new FormGroup({\n          name: new FormControl(language.name, [Validators.required, Validators.minLength(2)]),\n          level: new FormControl(language.level, [Validators.required])\n        }))),\n        workExperiences: new FormArray(resume.workExperiences.map((work: any) => new FormGroup({\n          company: new FormControl(work.company, [Validators.required, Validators.minLength(2)]),\n          jobTitle: new FormControl(work.jobTitle, [Validators.required, Validators.minLength(3)]),\n          jobDescription: new FormControl(work.jobDescription, [Validators.required, Validators.minLength(20)]),\n          startDate: new FormControl(work.startDate, [Validators.required]),\n          endDate: new FormControl(work.endDate)\n        }))),\n        awardsHonors: new FormArray(resume.awardsHonors.map((awardsHonors: any) => new FormGroup({\n          name: new FormControl(awardsHonors.name, [Validators.required, Validators.minLength(3)]),\n          year: new FormControl(awardsHonors.year, [Validators.required, Validators.minLength(4), Validators.maxLength(4), Validators.min(1900), Validators.max(new Date().getFullYear())])\n        }))),\n      });\n\n      return;\n    }\n\n    this.form = this.formBuilder.group({\n      candidate: this.formBuilder.group({\n        firstName: ['', [Validators.required, Validators.min(2)]],\n        lastName: ['', [Validators.required, Validators.min(2)]],\n        email: ['', [Validators.required, Validators.email]],\n        address: ['', [Validators.required, Validators.min(3)]],\n        phoneNumber: ['', [Validators.required, Validators.min(9), Validators.max(12)]],\n        dob: [''],\n        occupation: ['', [Validators.required, Validators.min(5)]],\n        photoUrl: [''],\n        externalLinks: this.formBuilder.array([])\n      }),\n      education: this.formBuilder.array([]),\n      leisures: this.formBuilder.array([]),\n      certifications: this.formBuilder.array([]),\n      skills: this.formBuilder.array([]),\n      references: this.formBuilder.array([]),\n      languages: this.formBuilder.array([]),\n      workExperiences: this.formBuilder.array([]),\n      awardsHonors: this.formBuilder.array([]),\n    });\n  }\n\n  onSubmit(): void {\n    console.log(this.form.value);\n  }\n\n  getCandidateForm(): FormGroup {\n    return this.form.get(\"candidate\") as FormGroup;\n  }\n\n  getEducationForm(): FormArray {\n    return this.form.get(\"education\") as FormArray;\n  }\n\n  getLeisuresForm(): FormArray {\n    return this.form.get(\"leisures\") as FormArray;\n  }\n\n  getCertificationsForm(): FormArray {\n    return this.form.get(\"certifications\") as FormArray;\n  }\n\n  getSkillsForm(): FormArray {\n    return this.form.get(\"skills\") as FormArray;\n  }\n\n  getReferencesForm(): FormArray {\n    return this.form.get(\"references\") as FormArray;\n  }\n\n  getLanguagesForm(): FormArray {\n    return this.form.get(\"languages\") as FormArray;\n  }\n\n  getWorkExperiencesForm(): FormArray {\n    return this.form.get(\"workExperiences\") as FormArray;\n  }\n\n  getAwardsHonorsForm(): FormArray {\n    return this.form.get(\"awardsHonors\") as FormArray;\n  }\n}\n","<form class=\"w-full form-container bg-white py-5\" (ngSubmit)=\"onSubmit()\">\n    <app-candidate-form [form]=\"getCandidateForm()\"></app-candidate-form>\n    <hr>\n\n    <app-education-form [form]=\"getEducationForm()\"></app-education-form>\n<hr>\n    <app-leisures-form [form]=\"getLeisuresForm()\"></app-leisures-form>\n<hr>\n    <app-certifications-form [form]=\"getCertificationsForm()\"></app-certifications-form>\n<hr>\n    <app-skills-form [form]=\"getSkillsForm()\"></app-skills-form>\n<hr>\n    <app-references-form [form]=\"getReferencesForm()\"></app-references-form>\n<hr>\n    <app-languages-form [form]=\"getLanguagesForm()\"></app-languages-form>\n<hr>\n    <app-work-experiences-form [form]=\"getWorkExperiencesForm()\"></app-work-experiences-form>\n<hr>\n    <app-awards-honors-form [form]=\"getAwardsHonorsForm()\"></app-awards-honors-form>\n\n    <div class=\"w-full flex justify-between px-4\">\n        <button class=\"bg-red-400 px-4 py-2 text-white rounded-[5px]\">Cancel</button>\n        <button class=\"bg-blue-500 text-white px-8 py-2 rounded-[5px]\" [ngClass]=\"form.invalid? 'bg-opacity-30': ''\" [disabled]=\"form.invalid\">Save</button>\n    </div>\n</form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}